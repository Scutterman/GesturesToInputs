#version 430 core

layout(local_size_x=1, local_size_y=1, local_size_z=1) in;

struct ThresholdData {
    uvec4 lowColour;
    uvec4 highColour;
    uvec4 trackerColour;
};

layout(std430, binding=0) buffer data {
    ThresholdData thresholds[];
};

uniform layout(binding=1,rgba8) image2D thresholdTexture;

void main() {
    ivec2 coords = ivec2(gl_WorkGroupID.x, gl_WorkGroupID.y);
    uint index = gl_WorkGroupID.z;
    
    vec4 sourcePixel = imageLoad(thresholdTexture, coords);
    uvec4 lowColour = thresholds[index].lowColour;
    uvec4 highColour = thresholds[index].highColour;
    uvec4 targetPixel = (
        sourcePixel.x >= lowColour.x / 179 && sourcePixel.x <= highColour.x  / 179 &&
        sourcePixel.y >= lowColour.y / 255 && sourcePixel.y <= highColour.y / 255 &&
        sourcePixel.z >= lowColour.z / 255 && sourcePixel.z <= highColour.z / 255
    ) ? uvec4(thresholds[index].trackerColour.x / 179, thresholds[index].trackerColour.y / 255, thresholds[index].trackerColour.z / 255, 1) : uvec4(0, 0, 0, 0);
    
    imageStore(thresholdTexture, coords, thresholds[index].trackerColour);

    // TODO:: memory barrier, morphological opening, memory barrier, morphological closing
}
