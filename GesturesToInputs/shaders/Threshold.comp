#version 430 core

layout(local_size_x=1, local_size_y=1, local_size_z=1) in;

struct ThresholdData {
    vec4 lowColour;
    vec4 highColour;
    vec4 trackerColour;
};

layout(std430, binding=0) buffer data {
    ThresholdData thresholds[];
};

uniform layout(binding=1,rgba32f) image2D thresholdTexture;
uniform uint numberOfColours;

void main() {
    ivec2 coords = ivec2(gl_WorkGroupID.xy);
    vec4 targetColour = vec4(0,0,0,0);
    for (uint index=  0; index < numberOfColours; index++) {
        vec4 sourcePixel = imageLoad(thresholdTexture, coords);
        vec4 lowColour = thresholds[index].lowColour;
        vec4 highColour = thresholds[index].highColour;
        if (
            sourcePixel.x >= lowColour.x / 179 && sourcePixel.x <= highColour.x  / 179 &&
            sourcePixel.y >= lowColour.y / 255 && sourcePixel.y <= highColour.y / 255 &&
            sourcePixel.z >= lowColour.z / 255 && sourcePixel.z <= highColour.z / 255
        ) {
            vec4 colour = thresholds[index].trackerColour;
            targetColour = vec4(colour.x / 179, colour.y / 255, colour.z / 255, 1);
            break;
        }
    }
    
    imageStore(thresholdTexture, coords, targetColour);

    // TODO:: memory barrier, morphological opening, memory barrier, morphological closing
}
