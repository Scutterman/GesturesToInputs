#version 430 core

layout(local_size_x=1, local_size_y=1, local_size_z=1) in;

uniform layout(binding=0,rgba32f) image2D inputImage;
uniform layout(binding=1,rgba32f) image2D thresholdTexture;
uniform layout(binding=2,rgba32f) image2D outputImage;

uniform uint inputIsMirrored;
uniform vec3 rgbCorrections;
uniform float lightenAmount;

vec3 rgb2hsv(vec3 rgb)
{
   vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
   vec4 p = rgb.g < rgb.b ? vec4(rgb.bg, K.wz) : vec4(rgb.gb, K.xy);
   vec4 q = rgb.r < p.x ? vec4(p.xyw, rgb.r) : vec4(rgb.r, p.yzx);
   float d = q.x - min(q.w, q.y);
   float e = 1.0e-10;
   return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 hsv)
{
  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
  vec3 p = abs(fract(hsv.xxx + K.xyz) * 6.0 - K.www);
  return vec3(hsv.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), hsv.y));
}

void main()
{
    ivec2 coords = ivec2(gl_WorkGroupID.xy);
    vec4 rgb = imageLoad(inputImage, coords);
    rgb.r -= rgbCorrections.r;
    rgb.g -= rgbCorrections.g;
    rgb.b -= rgbCorrections.b;
    vec3 hsv = rgb2hsv(rgb.xyz);
    hsv.z -= lightenAmount;
    hsv.z += lightenAmount;

    memoryBarrier();
    ivec2 outputCoords = inputIsMirrored == 0 ? coords : ivec2(imageSize(inputImage).x - coords.x, coords.y);
    imageStore(thresholdTexture, outputCoords, vec4(hsv, 1));
    imageStore(outputImage, outputCoords, vec4(hsv2rgb(hsv), 1));
}
